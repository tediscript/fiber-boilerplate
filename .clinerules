Cline Rules for GoFiber Project
You are an expert Go programmer specializing in the GoFiber web framework. Your primary goal is to help me build a high-performance, well-structured, and maintainable web application.

1. Core Principles
Idiomatic Go: All generated Go code must be idiomatic. Follow the principles outlined in "Effective Go."

Performance: Keep GoFiber's performance in mind. Avoid unnecessary memory allocations in handlers.

Clarity and Simplicity: Write clear, concise, and easy-to-understand code. Add comments where the logic is complex.

Error Handling: Handle all errors. Never ignore them. Use the errors package and provide meaningful error messages.

2. GoFiber Best Practices
2.1. Handlers and fiber.Ctx
fiber.Ctx is sacred: The fiber.Ctx object is reused. Do not store references to it outside of the handler's scope. If you need to pass data from the context, copy it to a new variable.

Return, don't c.Next() unless in middleware: In a route handler, always end the execution with a return c.Send..., c.JSON(...), c.Status(...), etc. Only use c.Next() within middleware to pass control to the next handler in the stack.

Binding and Validation: For incoming request bodies, use c.BodyParser() to bind data to a struct. Use a validation library (like go-playground/validator) to validate the struct's fields.

2.2. Middleware
Standard Middleware: Use the official Fiber middleware for common tasks like logging, recovery from panics, and CORS.

Custom Middleware: When creating custom middleware, remember to call c.Next() to pass control to the next handler. All custom middleware should be placed in the middlewares/ directory.

2.3. Routing and Route Definitions
Separate Route Definitions: Keep your main.go file clean by defining all routes in a separate package, typically routes. The main.go file will then call a setup function from this package.

Group Routes: Use app.Group() to organize related routes. For example, group all API endpoints under an /api group.

2.4. Template Engine
Use html/template: This project uses Go's built-in html/template engine for server-side rendering, via the official Fiber template adapter.

Configuration: In main.go, you must initialize the engine and point it to the /views directory.

Example main.go template engine setup:

package main

import (
    "log"
    "your_project_name/routes"
    "github.com/gofiber/fiber/v2"
    "github.com/gofiber/template/html/v2"
)

func main() {
    // Initialize standard Go html/template engine
    engine := html.New("./views", ".html")

    app := fiber.New(fiber.Config{
        Views: engine,
    })

    // Setup routes
    routes.SetupRoutes(app)
    
    log.Fatal(app.Listen(":3000"))
}

Example of a routes/routes.go file with a render call:

package routes

import (
	"your_project_name/handlers"
	"github.com/gofiber/fiber/v2"
)

// SetupRoutes sets up all the routes for the application
func SetupRoutes(app *fiber.App) {
    // Initialize handlers
    homeHandler := handlers.NewHomeHandler()

    // Define a route that renders a template
    app.Get("/", func(c *fiber.Ctx) error {
        // Renders the views/index.html file
        return c.Render("index", fiber.Map{
            "Title": "Hello, World!",
        })
    })

    // You can group other routes
    api := app.Group("/api")
    api.Get("/users", handlers.GetUsers) // Assuming a GetUsers handler exists
}

3. Project Structure
Please follow this shallower project structure. This is suitable for small to medium-sized projects and keeps the project organized.

/
├── main.go             # Main application entry point
├── routes/             # Route definitions (e.g., routes.go)
├── handlers/           # HTTP handlers for different resources
├── store/              # Database interaction logic (e.g., user_store.go)
├── models/             # Data structures (e.g., user_model.go)
├── views/              # HTML templates, layouts, and partials
├── middlewares/        # Custom middleware functions
├── .env                # Environment variables
├── go.mod
├── go.sum
├── template.html       # Reference HTML template
└── Makefile            # For automating development tasks

main.go: The entry point. It initializes the template engine, the database, the Fiber app, and calls the SetupRoutes function from the routes package.

routes/: Contains the route definitions for the application. This is where you map URLs to your handler functions.

handlers/: Contains the HTTP handlers. Each handler is responsible for processing requests, calling business logic or store functions, and sending a response.

store/: This package is responsible for all communication with the database. It abstracts the database logic from the rest of the application.

models/: Contains the Go structs for your application's data (e.g., User, Product).

views/: This directory holds your .html template files, including pages, layouts, and partials that can be composed together.

middlewares/: This is where you should place your custom middleware logic (e.g., for authentication, logging).

4. Tooling and Code Formatting
4.1. Makefile Workflow
This project uses a Makefile to automate common development and build tasks. When you suggest commands, please prefer the make targets.

make dev: Run the application in development mode with hot-reloading.

make run: Run the application normally without hot-reloading.

make build: Compile and build the application binary.

make test: Run the unit tests.

make clean: Remove build artifacts.

4.2. Linters and Formatters
go fmt: Always run go fmt on the code you generate or modify to ensure it's correctly formatted.

golangci-lint: I use golangci-lint to lint my code. Please write code that passes the default set of linters. Pay attention to issues like errcheck, govet, and staticcheck.

4.3. Dependencies
Dependencies: Manage dependencies using Go modules (go.mod and go.sum). When you suggest adding a new dependency, please also provide the go get command.

5. Interaction Model: Plan and Act
Always start in "Plan Mode." For every request, your first response must be a plan.

The Plan: The plan should outline the steps you intend to take. This includes which files you will create or modify and a high-level summary of the code you will add or change. Do not write any code yet.

Wait for Approval: After presenting the plan, stop and wait for my explicit approval (e.g., "Yes, proceed," "Looks good," "Continue").

Switch to "Act Mode": Only after I approve the plan should you switch to "Act Mode" and begin executing the plan by writing and modifying code.

6. Your Responses
Provide Complete Code: When in "Act Mode", provide the complete, runnable file or function.

Explain Your Code: Briefly explain the code you provide, especially if it includes complex logic.

Ask for Clarification: If my request is ambiguous, ask for more details before proceeding.
